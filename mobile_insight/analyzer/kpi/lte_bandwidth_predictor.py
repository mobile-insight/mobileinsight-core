#!/usr/bin/python
# Filename: tcp_cellular_analyzer.py
"""
Real-time decoder for TCP_Cellular client

Author: Haotian Deng, Yuanjie Li
"""

from .kpi_analyzer import KpiAnalyzer
from xml.dom import minidom
import datetime
import math
import os
import shutil
import socket
import subprocess
import sys
import threading

__all__=["LteBandwidthPredictor"]

"""
tbs: Transport block size mapping table.
This table is derived from Table 7.1.7.1-1 and 7.1.7.2.1 in TS36.213.
"""
tbs = [
    [16,24,32,40,56,72,328,104,120,136,144,176,208,224,256,280,328,336,376,408,440,488,520,552,584,616,712,632,648,680,712,776,808,840,968,840],
    [32,56,72,104,120,144,176,224,256,296,328,376,440,488,552,600,632,696,776,840,904,1000,1064,1128,1192,1256,1480,1288,1320,1384,1480,1544,1608,1672,1992,1736],
    [56,88,144,176,208,224,256,328,392,456,504,584,680,744,840,904,968,1064,1160,1288,1384,1480,1608,1736,1800,1864,2216,1928,1992,2088,2216,2344,2472,2536,2984,2600],
    [88,144,176,208,256,328,392,472,536,616,680,776,904,1000,1128,1224,1288,1416,1544,1736,1864,1992,2152,2280,2408,2536,2984,2600,2664,2792,2984,3112,3240,3368,4008,3496],
    [120,176,208,256,328,424,504,584,680,776,872,1000,1128,1256,1416,1544,1608,1800,1992,2152,2344,2472,2664,2856,2984,3112,3752,3240,3368,3496,3752,3880,4136,4264,4968,4392],
    [152,208,256,328,408,504,600,712,808,936,1032,1192,1352,1544,1736,1800,1928,2152,2344,2600,2792,2984,3240,3496,3624,3752,4392,3880,4008,4264,4392,4776,4968,5160,5992,5160],
    [176,224,296,392,488,600,712,840,968,1096,1224,1384,1608,1800,1992,2152,2280,2536,2792,2984,3240,3496,3752,4008,4264,4392,5160,4584,4584,4968,5160,5544,5736,5992,6968,5992],
    [208,256,328,440,552,680,808,968,1096,1256,1384,1608,1800,2024,2280,2472,2600,2856,3112,3496,3752,4008,4264,4584,4968,5160,5992,5160,5352,5544,5992,6200,6456,6712,7992,6968],
    [224,328,376,504,632,776,936,1096,1256,1416,1544,1800,2024,2280,2600,2728,2984,3240,3624,3880,4136,4584,4776,5160,5544,5736,6712,5992,5992,6200,6712,6968,7480,7736,8760,7736],
    [256,344,424,568,696,872,1032,1224,1384,1544,1736,2024,2280,2536,2856,3112,3240,3624,4008,4264,4584,4968,5352,5736,5992,6200,7480,6456,6712,6968,7480,7736,8248,8504,9912,8760],
    [288,376,472,616,776,968,1128,1320,1544,1736,1928,2216,2472,2856,3112,3368,3624,4008,4392,4776,5160,5544,5992,6200,6712,6968,8248,7224,7224,7736,8248,8504,9144,9528,10680,9528],
    [328,424,520,680,840,1032,1224,1480,1672,1864,2088,2408,2728,3112,3496,3624,3880,4392,4776,5160,5544,5992,6456,6968,7224,7480,8760,7736,7992,8504,8760,9528,9912,10296,11832,10296],
    [344,456,568,744,904,1128,1352,1608,1800,2024,2280,2600,2984,3368,3752,4008,4264,4776,5160,5544,5992,6456,6968,7480,7992,8248,9528,8504,8504,9144,9528,10296,10680,11064,12960,11448],
    [376,488,616,808,1000,1224,1480,1672,1928,2216,2472,2792,3240,3624,4008,4264,4584,5160,5544,5992,6456,6968,7480,7992,8504,8760,10296,9144,9144,9912,10296,11064,11448,11832,13536,12216],
    [392,520,648,872,1064,1320,1544,1800,2088,2344,2664,2984,3368,3880,4264,4584,4968,5352,5992,6456,6968,7480,7992,8504,9144,9528,11064,9912,9912,10680,11064,11832,12216,12960,14688,12960],
    [424,568,696,904,1128,1384,1672,1928,2216,2536,2792,3240,3624,4136,4584,4968,5160,5736,6200,6968,7480,7992,8504,9144,9912,10296,11832,10296,10680,11064,11832,12576,12960,13536,15840,14112],
    [456,600,744,968,1192,1480,1736,2088,2344,2664,2984,3496,3880,4392,4968,5160,5544,6200,6712,7224,7992,8504,9144,9912,10296,10680,12576,11064,11448,11832,12576,13536,14112,14688,16992,14688],
    [488,632,776,1032,1288,1544,1864,2216,2536,2856,3112,3624,4136,4584,5160,5544,5992,6456,7224,7736,8248,9144,9528,10296,11064,11448,13536,11832,11832,12576,13536,14112,14688,15264,17568,15840],
    [504,680,840,1096,1352,1672,1992,2344,2664,2984,3368,3880,4392,4968,5544,5736,6200,6712,7480,8248,8760,9528,10296,11064,11448,12216,14112,12576,12576,13536,14112,14688,15840,16416,19080,16416],
    [536,712,872,1160,1416,1736,2088,2472,2792,3112,3496,4008,4584,5160,5736,6200,6456,7224,7992,8504,9144,9912,10680,11448,12216,12576,14688,12960,12960,14112,14688,15840,16416,16992,19848,17568],
    [568,744,936,1224,1480,1864,2216,2536,2984,3368,3752,4264,4776,5352,5992,6456,6712,7480,8248,9144,9912,10680,11448,12216,12960,13536,15264,13536,14112,14688,15840,16416,17568,17568,20616,18336],
    [600,776,968,1256,1544,1928,2280,2664,3112,3496,3880,4392,4968,5736,6200,6712,7224,7992,8760,9528,10296,11064,11832,12576,13536,14112,16416,14112,14688,15264,16416,16992,18336,19080,21384,19080],
    [616,808,1000,1320,1608,2024,2408,2792,3240,3624,4008,4584,5352,5992,6456,6968,7480,8248,9144,9912,10680,11448,12576,12960,14112,14688,16992,15264,15264,16416,16992,18336,19080,19848,22920,19848],
    [648,872,1064,1384,1736,2088,2472,2984,3368,3752,4264,4776,5544,6200,6968,7224,7736,8760,9528,10296,11064,12216,12960,13536,14688,15264,17568,15840,15840,16992,17568,19080,19848,20616,23688,20616],
    [680,904,1096,1416,1800,2216,2600,3112,3496,4008,4392,4968,5736,6456,7224,7736,7992,9144,9912,10680,11448,12576,13536,14112,15264,15840,18336,16416,16416,17568,18336,19848,20616,21384,24496,22152],
    [712,936,1160,1480,1864,2280,2728,3240,3624,4136,4584,5352,5992,6712,7480,7992,8504,9528,10296,11064,12216,12960,14112,14688,15840,16416,19080,16992,16992,18336,19080,20616,21384,22152,25456,22920],
    [744,968,1192,1544,1928,2344,2792,3368,3752,4264,4776,5544,6200,6968,7736,8248,8760,9912,10680,11448,12576,13536,14688,15264,16416,16992,19848,17568,17568,19080,19848,21384,22152,22920,26416,23688],
    [776,1000,1256,1608,1992,2472,2984,3368,3880,4392,4968,5736,6456,7224,7992,8504,9144,10296,11064,12216,12960,14112,15264,15840,16992,17568,20616,18336,18336,19848,20616,22152,22920,23688,27376,24496],
    [776,1032,1288,1672,2088,2536,2984,3496,4008,4584,5160,5992,6712,7480,8248,8760,9528,10296,11448,12576,13536,14688,15840,16416,17568,18336,21384,19080,19080,20616,21384,22920,23688,24496,28336,25456],
    [808,1064,1320,1736,2152,2664,3112,3624,4264,4776,5352,5992,6712,7736,8504,9144,9912,10680,11832,12960,14112,15264,16416,16992,18336,19080,22152,19848,19848,21384,22152,23688,24496,25456,29296,26416],
    [840,1128,1384,1800,2216,2728,3240,3752,4392,4968,5544,6200,6968,7992,8760,9528,9912,11064,12216,13536,14688,15840,16992,17568,19080,19848,22920,20616,20616,22152,22920,24496,25456,26416,30576,27376],
    [872,1160,1416,1864,2280,2792,3368,3880,4584,5160,5736,6456,7224,8248,9144,9912,10296,11448,12576,13536,14688,15840,16992,18336,19848,20616,23688,20616,21384,22152,23688,25456,26416,27376,31704,27376],
    [904,1192,1480,1928,2344,2856,3496,4008,4584,5160,5736,6712,7480,8504,9528,10296,10680,11832,12960,14112,15264,16416,17568,19080,19848,20616,24496,21384,22152,22920,24496,25456,27376,28336,32856,29296],
    [936,1224,1544,1992,2408,2984,3496,4136,4776,5352,5992,6968,7736,8760,9912,10296,11064,12216,13536,14688,15840,16992,18336,19848,20616,21384,25456,22152,22920,23688,25456,26416,28336,29296,34008,29296],
    [968,1256,1544,2024,2472,3112,3624,4264,4968,5544,6200,6968,7992,9144,9912,10680,11448,12576,14112,15264,16416,17568,19080,19848,21384,22152,25456,22920,22920,24496,26416,27376,29296,29296,35160,30576],
    [1000,1288,1608,2088,2600,3112,3752,4392,4968,5736,6200,7224,8248,9144,10296,11064,11832,12960,14112,15264,16992,18336,19080,20616,22152,22920,26416,23688,23688,25456,26416,28336,29296,30576,35160,30576],
    [1032,1352,1672,2152,2664,3240,3880,4584,5160,5736,6456,7480,8504,9528,10680,11448,12216,13536,14688,15840,16992,18336,19848,21384,22920,23688,27376,24496,24496,26416,27376,29296,30576,31704,36696,31704],
    [1032,1384,1672,2216,2728,3368,4008,4584,5352,5992,6712,7736,8760,9912,11064,11832,12216,13536,15264,16416,17568,19080,20616,22152,22920,24496,28336,24496,25456,26416,28336,29296,31704,32856,37888,32856],
    [1064,1416,1736,2280,2792,3496,4136,4776,5544,6200,6712,7736,8760,9912,11064,11832,12576,14112,15264,16992,18336,19848,21384,22152,23688,24496,29296,25456,25456,27376,29296,30576,31704,32856,39232,34008],
    [1096,1416,1800,2344,2856,3496,4136,4968,5544,6200,6968,7992,9144,10296,11448,12216,12960,14688,15840,16992,18336,19848,21384,22920,24496,25456,29296,26416,26416,28336,29296,31704,32856,34008,39232,35160],
    [1128,1480,1800,2408,2984,3624,4264,4968,5736,6456,7224,8248,9528,10680,11832,12576,13536,14688,16416,17568,19080,20616,22152,23688,25456,26416,30576,26416,27376,29296,30576,31704,34008,35160,40576,35160],
    [1160,1544,1864,2472,2984,3752,4392,5160,5992,6712,7480,8504,9528,10680,12216,12960,13536,15264,16416,18336,19848,21384,22920,24496,25456,26416,30576,27376,27376,29296,31704,32856,35160,35160,40576,36696],
    [1192,1544,1928,2536,3112,3752,4584,5352,5992,6712,7480,8760,9912,11064,12216,12960,14112,15264,16992,18336,19848,21384,22920,24496,26416,27376,31704,27376,28336,30576,31704,34008,35160,36696,42368,36696],
    [1224,1608,1992,2536,3112,3880,4584,5352,6200,6968,7736,8760,9912,11448,12576,13536,14112,15840,17568,19080,20616,22152,23688,25456,26416,28336,32856,29296,29296,30576,32856,34008,36696,37888,43816,37888],
    [1256,1608,2024,2600,3240,4008,4776,5544,6200,6968,7992,9144,10296,11448,12960,13536,14688,16416,17568,19080,20616,22920,24496,25456,27376,28336,32856,29296,29296,31704,34008,35160,36696,37888,43816,39232],
    [1256,1672,2088,2664,3240,4008,4776,5736,6456,7224,7992,9144,10680,11832,12960,14112,14688,16416,18336,19848,21384,22920,24496,26416,28336,29296,34008,29296,30576,32856,34008,36696,37888,39232,45352,40576],
    [1288,1736,2088,2728,3368,4136,4968,5736,6456,7480,8248,9528,10680,12216,13536,14688,15264,16992,18336,20616,22152,23688,25456,27376,28336,29296,35160,30576,31704,32856,35160,36696,39232,40576,46888,40576],
    [1320,1736,2152,2792,3496,4264,4968,5992,6712,7480,8504,9528,11064,12216,13536,14688,15840,17568,19080,20616,22152,24496,25456,27376,29296,30576,35160,30576,31704,34008,35160,37888,39232,40576,46888,40576],
    [1352,1800,2216,2856,3496,4392,5160,5992,6968,7736,8504,9912,11064,12576,14112,15264,15840,17568,19080,21384,22920,24496,26416,28336,29296,31704,36696,31704,32856,34008,36696,37888,40576,42368,48936,42368],
    [1384,1800,2216,2856,3624,4392,5160,6200,6968,7992,8760,9912,11448,12960,14112,15264,16416,18336,19848,21384,22920,25456,27376,28336,30576,31704,36696,32856,32856,35160,36696,39232,40576,42368,48936,43816],
    [1416,1864,2280,2984,3624,4584,5352,6200,7224,7992,9144,10296,11832,12960,14688,15840,16416,18336,19848,22152,23688,25456,27376,29296,31704,32856,37888,32856,34008,35160,37888,40576,42368,43816,51024,43816],
    [1416,1864,2344,2984,3752,4584,5352,6456,7224,8248,9144,10680,11832,13536,14688,15840,16992,19080,20616,22152,24496,26416,28336,29296,31704,32856,37888,34008,34008,36696,39232,40576,42368,43816,51024,45352],
    [1480,1928,2344,3112,3752,4776,5544,6456,7480,8248,9144,10680,12216,13536,15264,16416,16992,19080,21384,22920,24496,26416,28336,30576,32856,34008,39232,34008,35160,36696,39232,42368,43816,45352,52752,45352],
    [1480,1992,2408,3112,3880,4776,5736,6712,7480,8504,9528,11064,12216,14112,15264,16416,17568,19848,21384,22920,25456,27376,29296,30576,32856,34008,40576,35160,35160,37888,40576,42368,45352,46888,52752,46888],
    [1544,1992,2472,3240,4008,4776,5736,6712,7736,8760,9528,11064,12576,14112,15840,16992,17568,19848,22152,23688,25456,27376,29296,31704,34008,35160,40576,36696,36696,39232,40576,43816,45352,46888,55056,48936],
    [1544,2024,2536,3240,4008,4968,5992,6712,7736,8760,9912,11448,12576,14688,15840,16992,18336,20616,22152,24496,26416,28336,30576,31704,34008,35160,40576,36696,36696,39232,42368,43816,46888,46888,55056,48936],
    [1608,2088,2536,3368,4136,4968,5992,6968,7992,9144,9912,11448,12960,14688,16416,17568,18336,20616,22920,24496,26416,28336,30576,32856,35160,36696,42368,36696,37888,40576,42368,45352,46888,48936,57336,48936],
    [1608,2088,2600,3368,4136,5160,5992,6968,7992,9144,10296,11832,12960,14688,16416,17568,19080,20616,22920,25456,27376,29296,31704,32856,35160,36696,42368,37888,37888,40576,43816,45352,46888,48936,57336,51024],
    [1608,2152,2664,3496,4264,5160,6200,7224,8248,9144,10296,11832,13536,15264,16992,18336,19080,21384,23688,25456,27376,29296,31704,34008,36696,37888,43816,37888,39232,42368,43816,46888,48936,51024,59256,51024],
    [1672,2152,2664,3496,4264,5352,6200,7224,8504,9528,10680,12216,13536,15264,16992,18336,19848,21384,23688,25456,28336,30576,32856,34008,36696,37888,43816,39232,39232,42368,45352,46888,48936,51024,59256,52752],
    [1672,2216,2728,3624,4392,5352,6456,7480,8504,9528,10680,12216,14112,15840,17568,18336,19848,22152,24496,26416,28336,30576,32856,35160,36696,39232,45352,40576,40576,42368,45352,46888,51024,52752,59256,52752],
    [1736,2280,2792,3624,4392,5544,6456,7480,8760,9912,11064,12576,14112,15840,17568,19080,19848,22152,24496,26416,29296,31704,34008,35160,37888,39232,45352,40576,40576,43816,45352,48936,51024,52752,61664,55056],
    [1736,2280,2856,3624,4584,5544,6456,7736,8760,9912,11064,12576,14112,16416,18336,19080,20616,22920,24496,27376,29296,31704,34008,36696,37888,40576,46888,40576,42368,43816,46888,48936,52752,52752,61664,55056],
    [1800,2344,2856,3752,4584,5736,6712,7736,9144,10296,11448,12960,14688,16416,18336,19848,20616,22920,25456,27376,29296,31704,34008,36696,39232,40576,46888,40576,42368,45352,46888,51024,52752,55056,63776,55056],
    [1800,2344,2856,3752,4584,5736,6712,7992,9144,10296,11448,12960,14688,16992,18336,19848,21384,23688,25456,28336,30576,32856,35160,37888,39232,40576,48936,42368,43816,45352,48936,51024,52752,55056,63776,57336],
    [1800,2408,2984,3880,4776,5736,6968,7992,9144,10296,11448,13536,15264,16992,19080,20616,21384,23688,26416,28336,30576,32856,35160,37888,40576,42368,48936,42368,43816,46888,48936,51024,55056,57336,63776,57336],
    [1864,2472,2984,3880,4776,5992,6968,8248,9528,10680,11832,13536,15264,16992,19080,20616,22152,24496,26416,29296,31704,34008,36696,37888,40576,42368,48936,43816,43816,46888,48936,52752,55056,57336,66592,57336],
    [1864,2472,3112,4008,4968,5992,6968,8248,9528,10680,11832,13536,15264,17568,19848,20616,22152,24496,27376,29296,31704,34008,36696,39232,42368,43816,51024,43816,45352,46888,51024,52752,55056,57336,66592,59256],
    [1928,2536,3112,4008,4968,5992,7224,8504,9528,11064,12216,14112,15840,17568,19848,21384,22152,24496,27376,29296,31704,35160,36696,39232,42368,43816,51024,45352,45352,48936,51024,55056,57336,59256,68808,59256],
    [1928,2536,3112,4136,4968,6200,7224,8504,9912,11064,12216,14112,15840,18336,19848,21384,22920,25456,27376,30576,32856,35160,37888,40576,42368,43816,52752,45352,46888,48936,52752,55056,57336,59256,68808,61664],
    [1992,2600,3240,4136,5160,6200,7480,8760,9912,11064,12576,14112,16416,18336,20616,22152,22920,25456,28336,30576,32856,35160,37888,40576,43816,45352,52752,45352,46888,48936,52752,55056,59256,61664,71112,61664],
    [1992,2600,3240,4264,5160,6200,7480,8760,9912,11448,12576,14688,16416,18336,20616,22152,23688,26416,28336,30576,34008,36696,39232,40576,43816,45352,52752,46888,46888,51024,52752,57336,59256,61664,71112,61664],
    [2024,2664,3240,4264,5160,6456,7736,8760,10296,11448,12960,14688,16416,19080,20616,22152,23688,26416,29296,31704,34008,36696,39232,42368,45352,46888,55056,46888,48936,51024,55056,57336,59256,61664,71112,63776],
    [2088,2728,3368,4392,5352,6456,7736,9144,10296,11832,12960,14688,16992,19080,21384,22920,24496,26416,29296,31704,34008,36696,40576,42368,45352,46888,55056,48936,48936,52752,55056,57336,61664,63776,73712,63776],
    [2088,2728,3368,4392,5352,6712,7736,9144,10680,11832,12960,15264,16992,19080,21384,22920,24496,27376,29296,32856,35160,37888,40576,43816,45352,46888,55056,48936,48936,52752,55056,59256,61664,63776,75376,66592],
    [2088,2792,3368,4392,5544,6712,7992,9144,10680,11832,13536,15264,17568,19848,22152,23688,24496,27376,30576,32856,35160,37888,40576,43816,46888,48936,55056,48936,51024,52752,57336,59256,63776,63776,76208,66592],
    [2152,2792,3496,4584,5544,6712,7992,9528,10680,12216,13536,15840,17568,19848,22152,23688,25456,27376,30576,32856,35160,39232,42368,43816,46888,48936,57336,51024,51024,55056,57336,59256,63776,66592,76208,66592],
    [2152,2856,3496,4584,5544,6968,8248,9528,11064,12216,13536,15840,17568,19848,22152,23688,25456,28336,30576,34008,36696,39232,42368,45352,46888,48936,57336,51024,51024,55056,57336,61664,63776,66592,76208,68808],
    [2216,2856,3496,4584,5736,6968,8248,9528,11064,12576,14112,15840,18336,20616,22920,24496,25456,28336,31704,34008,36696,39232,42368,45352,48936,51024,57336,51024,52752,55056,59256,61664,66592,66592,78704,68808],
    [2216,2856,3624,4776,5736,6968,8248,9912,11064,12576,14112,16416,18336,20616,22920,24496,26416,29296,31704,34008,36696,40576,43816,45352,48936,51024,59256,52752,52752,57336,59256,63776,66592,68808,78704,68808],
    [2280,2984,3624,4776,5736,7224,8504,9912,11448,12960,14112,16416,18336,20616,22920,24496,26416,29296,31704,35160,37888,40576,43816,46888,48936,51024,59256,52752,52752,57336,59256,63776,66592,68808,81176,71112],
    [2280,2984,3624,4776,5992,7224,8504,9912,11448,12960,14688,16416,19080,21384,23688,25456,26416,29296,32856,35160,37888,40576,43816,46888,51024,52752,59256,52752,55056,57336,61664,63776,68808,71112,81176,71112],
    [2280,2984,3752,4776,5992,7224,8760,10296,11448,12960,14688,16992,19080,21384,23688,25456,27376,30576,32856,35160,39232,42368,45352,46888,51024,52752,61664,55056,55056,59256,61664,63776,68808,71112,81176,71112],
    [2344,3112,3752,4968,5992,7480,8760,10296,11832,13536,14688,16992,19080,21384,24496,25456,27376,30576,32856,36696,39232,42368,45352,48936,51024,52752,61664,55056,55056,59256,61664,66592,68808,71112,81176,73712],
    [2344,3112,3880,4968,5992,7480,8760,10296,11832,13536,14688,16992,19080,22152,24496,26416,27376,30576,34008,36696,39232,42368,45352,48936,52752,55056,61664,55056,57336,59256,63776,66592,71112,73712,84760,75376],
    [2408,3112,3880,4968,6200,7480,9144,10680,12216,13536,15264,17568,19848,22152,24496,26416,28336,30576,34008,36696,40576,43816,46888,48936,52752,55056,63776,55056,57336,61664,63776,66592,71112,73712,84760,75376],
    [2408,3240,3880,5160,6200,7736,9144,10680,12216,13536,15264,17568,19848,22152,25456,26416,28336,31704,34008,37888,40576,43816,46888,51024,52752,55056,63776,57336,57336,61664,63776,68808,71112,73712,84760,76208],
    [2472,3240,4008,5160,6200,7736,9144,10680,12216,14112,15264,17568,19848,22920,25456,27376,28336,31704,35160,37888,40576,43816,46888,51024,52752,55056,63776,57336,59256,61664,66592,68808,73712,75376,87936,76208],
    [2472,3240,4008,5160,6456,7736,9144,11064,12576,14112,15840,18336,20616,22920,25456,27376,29296,31704,35160,37888,42368,45352,48936,51024,55056,57336,66592,57336,59256,61664,66592,68808,73712,76208,87936,78704],
    [2536,3240,4008,5352,6456,7992,9528,11064,12576,14112,15840,18336,20616,22920,25456,27376,29296,32856,35160,39232,42368,45352,48936,51024,55056,57336,66592,59256,59256,63776,66592,71112,73712,76208,87936,78704],
    [2536,3368,4136,5352,6456,7992,9528,11064,12576,14112,15840,18336,20616,23688,26416,28336,29296,32856,36696,39232,42368,45352,48936,52752,55056,57336,66592,59256,59256,63776,66592,71112,75376,78704,90816,78704],
    [2536,3368,4136,5352,6456,7992,9528,11448,12960,14688,16416,18336,21384,23688,26416,28336,30576,32856,36696,39232,42368,46888,48936,52752,57336,59256,68808,59256,61664,63776,68808,71112,76208,78704,90816,81176],
    [2600,3368,4136,5352,6712,8248,9528,11448,12960,14688,16416,19080,21384,23688,26416,28336,30576,34008,36696,40576,43816,46888,51024,52752,57336,59256,68808,59256,61664,66592,68808,73712,76208,78704,90816,81176],
    [2600,3496,4264,5544,6712,8248,9912,11448,12960,14688,16416,19080,21384,24496,27376,29296,30576,34008,37888,40576,43816,46888,51024,55056,57336,59256,68808,61664,61664,66592,68808,73712,78704,81176,93800,81176],
    [2664,3496,4264,5544,6712,8248,9912,11448,13536,15264,16992,19080,21384,24496,27376,29296,30576,34008,37888,40576,43816,46888,51024,55056,57336,61664,71112,61664,63776,66592,71112,75376,78704,81176,93800,81176],
    [2664,3496,4264,5544,6968,8504,9912,11832,13536,15264,16992,19080,22152,24496,27376,29296,31704,35160,37888,40576,45352,48936,51024,55056,59256,61664,71112,61664,63776,66592,71112,75376,78704,81176,93800,84760],
    [2728,3496,4392,5736,6968,8504,10296,11832,13536,15264,16992,19848,22152,25456,28336,29296,31704,35160,37888,42368,45352,48936,52752,55056,59256,61664,71112,63776,63776,68808,71112,76208,81176,84760,93800,84760],
    [2728,3624,4392,5736,6968,8760,10296,11832,13536,15264,16992,19848,22152,25456,28336,30576,31704,35160,39232,42368,45352,48936,52752,57336,59256,61664,73712,63776,63776,68808,73712,76208,81176,84760,97896,84760],
    [2728,3624,4392,5736,6968,8760,10296,12216,14112,15840,17568,19848,22920,25456,28336,30576,31704,35160,39232,42368,46888,48936,52752,57336,61664,63776,73712,63776,66592,68808,73712,78704,81176,84760,97896,84760],
    [2792,3624,4584,5736,7224,8760,10296,12216,14112,15840,17568,19848,22920,25456,28336,30576,32856,36696,39232,43816,46888,51024,55056,57336,61664,63776,75376,66592,66592,71112,73712,78704,81176,84760,97896,87936],
    [2792,3752,4584,5992,7224,8760,10680,12216,14112,15840,17568,20616,22920,26416,29296,30576,32856,36696,40576,43816,46888,51024,55056,57336,61664,63776,75376,66592,66592,71112,75376,78704,84760,87936,97896,87936],
    [2856,3752,4584,5992,7224,9144,10680,12576,14112,16416,18336,20616,23688,26416,29296,31704,32856,36696,40576,43816,46888,51024,55056,59256,61664,63776,75376,66592,66592,71112,76208,81176,84760,87936,97896,87936],
    [2856,3752,4584,5992,7480,9144,10680,12576,14688,16416,18336,20616,23688,26416,29296,31704,34008,36696,40576,43816,48936,51024,55056,59256,63776,66592,75376,66592,68808,73712,76208,81176,84760,87936,97896,87936],
    [2856,3752,4584,5992,7480,9144,10680,12576,14688,16416,18336,21384,23688,26416,29296,31704,34008,37888,40576,45352,48936,52752,57336,59256,63776,66592,75376,68808,68808,73712,76208,81176,84760,87936,97896,90816],
    [2984,3880,4776,6200,7480,9144,11064,12960,14688,16416,18336,21384,23688,27376,30576,31704,34008,37888,42368,45352,48936,52752,57336,59256,63776,66592,75376,68808,68808,73712,78704,81176,87936,90816,97896,90816],
    [2984,3880,4776,6200,7480,9528,11064,12960,14688,16992,18336,21384,24496,27376,30576,32856,34008,37888,42368,45352,48936,52752,57336,61664,63776,66592,75376,68808,71112,75376,78704,84760,87936,90816,97896,90816],
    [2984,3880,4776,6200,7736,9528,11064,12960,15264,16992,19080,21384,24496,27376,30576,32856,35160,39232,42368,46888,48936,52752,57336,61664,66592,68808,75376,71112,71112,75376,78704,84760,87936,90816,97896,93800],
    [2984,4008,4776,6200,7736,9528,11448,12960,15264,16992,19080,22152,24496,27376,30576,32856,35160,39232,42368,46888,51024,55056,59256,61664,66592,68808,75376,71112,71112,76208,81176,84760,87936,93800,97896,93800],
    [2984,4008,4968,6456,7736,9528,11448,13536,15264,16992,19080,22152,24496,28336,31704,34008,35160,39232,43816,46888,51024,55056,59256,61664,66592,68808,75376,71112,71112,76208,81176,84760,90816,93800,97896,93800],
    [3112,4008,4968,6456,7992,9528,11448,13536,15264,17568,19080,22152,25456,28336,31704,34008,35160,39232,43816,46888,51024,55056,59256,63776,66592,71112,75376,71112,73712,76208,81176,87936,90816,93800,97896,97896]
];

mcs_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]
cqi_mcs = [0, 0, 0, 2, 5, 7, 9, 12, 14, 16, 20, 23, 25, 27, 28, 28]	# nRB = 20

# Map downlink bandwidth (in MHz) to total resource block the downlink spectrum
nrb_table = {'1.4 MHz': 6,
             '3 MHz': 15,
             '5 MHz': 25,
             '10 MHz': 50,
             '15 MHz': 75,
             '20 MHz': 100}

class LteBandwidthPredictor(KpiAnalyzer):

    def __init__(self):

        KpiAnalyzer.__init__(self)

        self.add_source_callback(self.__msg_callback)

        self.array_nRB_pcell = [0]
        self.array_MCS_pcell = [0]
        self.nNack = 0
        self.array_rsrq_pcell = []
        self.array_snr_pcell = []
        self.dict_meas_pcell = {}
        self.array_data_frame_pcell = []
        self.previousTimeMeas = datetime.datetime.utcnow()
        self.array_cqi_pcell = [0]
        self.array_ri_pcell = [1]

        # From TrackCellInfoAnalyzer: Critical to select the prediction algorithm
        self.__mib_antenna = None
        self.__mib_dl_bandwidth = None
        self.__total_resource_block = None
        self.__nref = None # Number of reference radio blocks in PDSCH
        self.__activate_prediction = False

        self.include_analyzer('TrackCellInfoAnalyzer', [self.__cell_info_callback])
        self.register_kpi("Wireless", "CELL_LOAD", self.__msg_callback,[])

    def set_source(self,source):
        """
        Set the trace source. Enable the cellular signaling messages

        :param source: the trace source (collector).
        """
        KpiAnalyzer.set_source(self,source)

        # source.enable_log("LTE_RLC_UL_AM_All_PDU") # seems unused
        # source.enable_log("LTE_RLC_DL_AM_All_PDU") # seems unused

        source.enable_log("LTE_PHY_PUSCH_CSF")
        source.enable_log("LTE_PHY_PDSCH_Stat_Indication")
        source.enable_log("LTE_PHY_Serv_Cell_Measurement")

    def predict_bandwidth(self, rsrq, snr, nRB_allocated, MCS, CQI, ri):

        """
        Estimate the globally available bandwdith in Mbps
        """

        if not self.__activate_prediction:
            return None, None, None, None
        transportBlockSize = 0
        rsrq_real = math.pow(10, rsrq / 10.0)
        snr_real = math.pow(10, snr / 10.0)
        rsrq_snr_real = rsrq_real * (snr_real + 1) / snr_real;

        # nRB = int(round((math.pow(rsrq_snr_real, -1) - 4) / 32 * 100))
        # # nRB = int(round((math.pow(rsrq_real, -1) - 4) / 32 * 100))

        # cell_load = #available_RBs/#total_RBs
        cell_load = (math.pow(rsrq_snr_real, -1) - self.__nref) / ((12-self.__nref) * self.__mib_antenna)
        nRB = int(round(cell_load * self.__total_resource_block))

        if cell_load < 0:
            cell_load = 0
        """ 
        FIXME: Congestion happens when cell is fully utilized. 
        Whenever cell_load < 1, it implies that congestion is NOT the bottleneck
        """
        # if cell_load > 1:
        #     cell_load = 1

        if nRB < 0:
            nRB = 0
        if nRB > self.__total_resource_block:
            nRB = self.__total_resource_block
        if nRB < nRB_allocated:
            # the signal measurement result is not trustable, don't try to probe
            # idle resource.
            nRB = self.__total_resource_block
        nRB_new = self.__total_resource_block - nRB + nRB_allocated
        if nRB_new > self.__total_resource_block:
            nRB_new = self.__total_resource_block
        if MCS == 0:
            MCS = cqi_mcs[CQI]
        if MCS > 28:
            # TODO: For MCS = 29, 30, 31, use last known MCS
            self.log_warning("nRB_new="+str(nRB_new)+ " MCS="+str(MCS))
            return None, None, None, None
        transportBlockSize = tbs[nRB_new][mcs_index[MCS]]
        # multiple streams
        rt = transportBlockSize / 1000.0 * ri
        
        return rt, nRB_new, MCS, cell_load

    def __cell_info_callback(self, msg):
        self.__mib_antenna = self.get_analyzer('TrackCellInfoAnalyzer').get_mib_number_of_antennas()
        self.__mib_dl_bandwidth = self.get_analyzer('TrackCellInfoAnalyzer').get_mib_downlink_bandwidth()
        if self.__mib_dl_bandwidth in nrb_table:
            self.__total_resource_block = nrb_table[self.__mib_dl_bandwidth]
        else:
            self.__total_resource_block = None
        self.__nref = 2 if self.__mib_antenna < 2 else 4

        # Activate the prediction iff. all parameters are ready
        self.__activate_prediction = self.__mib_antenna \
                                   and self.__mib_dl_bandwidth \
                                   and self.__total_resource_block \
                                   and self.__nref

        # self.log_warning("numAntenna: " + str(self.__mib_antenna)
        #                 + ", Nrb: " + str(self.__total_resource_block)
        #                 + ", Nref: " + str(self.__nref))

    def __msg_callback(self,msg):
        if msg.type_id == "LTE_PHY_Serv_Cell_Measurement":
            log_item = msg.data.decode()
            if 'Subpackets' not in log_item:
                return
            servingCell = log_item['Subpackets'][0]
            
            if 'Serving Cell Index' in servingCell:
                servCellIdx = str(servingCell['Serving Cell Index'])
            else:
                servCellIdx = None
            if servCellIdx == 'PCell':
                rsrq0 = servingCell['RSRQ Rx[0]']
                rsrq1 = servingCell['RSRQ Rx[1]']
                snr0 = servingCell['FTL SNR Rx[0]']
                snr1 = servingCell['FTL SNR Rx[1]']
                rsrq = servingCell['RSRQ']

                if rsrq == rsrq0:
                    snr = snr0
                else:
                    snr = snr1

                sys_fn = servingCell['Current SFN']
                sub_fn = servingCell['Current Subframe Number']
                self.dict_meas_pcell[(sys_fn, sub_fn)] = (float(rsrq), float(snr))

        elif msg.type_id == "LTE_PHY_PDSCH_Stat_Indication":
            log_item = msg.data.decode()
            currentTime = datetime.datetime.utcnow()
            for record in log_item['Records']:
                if record['Serving Cell Index'] == 'PCell':
                    for tb in record['Transport Blocks']:
                        if tb['TB Index'] == 0 and tb['RNTI Type'] == 'C-RNTI':
                            self.array_MCS_pcell.append(tb['MCS'])
                            self.array_nRB_pcell.append(tb['Num RBs'])
                            if tb['Num RBs'] > 12:
                                self.array_data_frame_pcell.append((record['Frame Num'], record['Subframe Num']))

                if (currentTime - self.previousTimeMeas).total_seconds() > 0.1 and len(self.dict_meas_pcell) > 0:
                    msgtimestamp = str(log_item['timestamp'])

                    self.array_nRB_pcell.sort()
                    nRB_allocated = self.array_nRB_pcell[len(self.array_nRB_pcell) // 2]
                    self.array_MCS_pcell.sort()
                    MCS_result = self.array_MCS_pcell[len(self.array_MCS_pcell) // 2]

                    self.array_cqi_pcell.sort()
                    cqi = self.array_cqi_pcell[len(self.array_cqi_pcell) // 2]
                    self.array_ri_pcell.sort()
                    ri = self.array_ri_pcell[len(self.array_ri_pcell) // 2]

                    if len(self.array_data_frame_pcell) > 0:
                        for sys_fn, sub_fn in self.array_data_frame_pcell:
                            if (sys_fn, sub_fn) in self.dict_meas_pcell:
                                meas = self.dict_meas_pcell[(sys_fn, sub_fn)]
                                self.array_rsrq_pcell.append(meas[0])
                                self.array_snr_pcell.append(meas[1])

                    readyForEstimate = True
                    if len(self.array_rsrq_pcell) <= 3 and nRB_allocated <= 12:
                        for meas in list(self.dict_meas_pcell.values()):
                            self.array_rsrq_pcell.append(meas[0])
                            self.array_snr_pcell.append(meas[1])
                    if len(self.array_rsrq_pcell) <= 3:
                        readyForEstimate = False
                    if readyForEstimate:
                        self.array_rsrq_pcell.sort()
                        rsrq = self.array_rsrq_pcell[len(self.array_rsrq_pcell) // 2]
                        self.array_snr_pcell.sort()
                        snr = self.array_snr_pcell[len(self.array_snr_pcell) // 2]

                        estimated_bandwidth, nRB_new, MCS_new, cell_load = self.predict_bandwidth(\
                                rsrq, \
                                snr, \
                                nRB_allocated, \
                                MCS_result, \
                                cqi, \
                                ri)
                        if estimated_bandwidth:
                            kpi = {}
                            kpi['Cell load'] = str(round(cell_load, 2))
                            kpi['Estimated free bandwidth (Mbps)'] = str(estimated_bandwidth)
                            kpi['RSRQ'] = str(rsrq)
                            kpi['SNR'] = str(snr)
                            kpi['CQI'] = str(cqi)
                            self.broadcast_info('BANDWIDTH_PREDICTION', kpi)

                            self.upload_kpi('KPI.Wireless.CELL_LOAD', kpi)

                            self.log_info("Estimated bandwidth: " \
                                        + str(estimated_bandwidth) \
                                        + " Mbps, Cell load: " + str(round(cell_load, 2)) \
                                        + ", nRB: " + str(nRB_new) \
                                        # + ", MCS_old: " + str(MCS_result) \
                                        # + ", MCS_new: " + str(MCS_new) \
                                        # + ", RI: " + str(RI)\
                                        + ", CQI: " + str(cqi) \
                                        + ", rsrq: " + str(rsrq) \
                                        + ", snr: " + str(snr) \
                                        # + ", nMeas: " + str(len(self.array_rsrq_pcell)) \
                                        # + ", nRB_allocated: " + str(nRB_allocated) \
                                        # + ", nPdsch_PCell: " + str(len(self.array_nRB_pcell)) \
                                        # + "," + msgtimestamp \
                                        )


            
                        self.array_nRB_pcell = [nRB_allocated]
                        self.array_MCS_pcell = [MCS_result]
                        self.array_rsrq_pcell = []
                        self.array_snr_pcell = []
                        self.dict_meas_pcell = {}
                        self.array_data_frame_pcell = []
                        self.array_cqi_pcell = [cqi]
                        self.array_ri_pcell = [ri]
                        self.previousTimeMeas = currentTime

        # """
        # FIXME: Is the following code necessary for
        #     (1) Bandwidth and cell load estimation;
        #     (2) TCP loss recovery?
        # """
        # elif msg.type_id == "LTE_RLC_DL_AM_All_PDU":
        #     log_item = msg.data.decode()
        #     subpacket = log_item['Subpackets'][0]
        #     count = 0
        #     for pdu in subpacket['RLCDL PDUs']:
        #         if pdu['PDU TYPE'] == 'RLCDL CTRL':
        #             if 'RLC CTRL NACK' in pdu:
        #                 count += len(pdu['RLC CTRL NACK'])
        #     self.nNack += count
        #     if self.nNack > 0:
        #         # self.log_info("Number of RLC NACK: " + str(self.nNack))
        #         # cmd = "su -c sysctl -w net.ipv4.tcp_flag_rlc_nack=" \
        #         #         + str(self.nNack)
        #         # p = subprocess.Popen(cmd, \
        #         #         executable = mi2app_utils.ANDROID_SHELL, \
        #         #         shell = True, \
        #         #         stdin = subprocess.PIPE, \
        #         #         stdout = subprocess.PIPE)
        #         # p.wait()
        #         self.nNack = 0

        elif msg.type_id == "LTE_PHY_PUSCH_CSF":
            log_item = msg.data.decode()
            if log_item['Carrier Index'] == 'PCC':
                CQI0 = log_item['WideBand CQI CW0']
                self.array_cqi_pcell.append(CQI0)
                if log_item['Rank Index'] == 'Rank 2':
                    self.array_ri_pcell.append(2)
                else:
                    self.array_ri_pcell.append(1)
